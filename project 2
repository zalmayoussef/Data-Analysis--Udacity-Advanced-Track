Loading [MathJax]/jax/output/HTML-CSS/jax.js
Analyze A/B Test Results
Table of Contents
Introduction
Part I - Probability
Part II - A/B Test
Part III - Regression

Introduction¶
A/B tests are very commonly performed by data analysts and data scientists. It is important that you get some practice working with the difficulties of these

For this project, you will be working to understand the results of an A/B test run by an e-commerce website. Your goal is to work through this notebook to help the company understand if they should implement the new page, keep the old page, or perhaps run the experiment longer to make their decision.


Part I - Probability
To get started, let's import our libraries.

import pandas as pd
import numpy as np
import random
import matplotlib.pyplot as plt
%matplotlib inline
#We are setting the seed to assure you get the same answers on quizzes as we set up
random.seed(42)
1. Now, read in the ab_data.csv data. Store it in df. Use your dataframe to answer the questions in Quiz 1 of the classroom.

a. Read in the dataset and take a look at the top few rows here:

df = pd.read_csv("ab_data.csv")
df.head()
user_id	timestamp	group	landing_page	converted
0	851104	2017-01-21 22:11:48.556739	control	old_page	0
1	804228	2017-01-12 08:01:45.159739	control	old_page	0
2	661590	2017-01-11 16:55:06.154213	treatment	new_page	0
3	853541	2017-01-08 18:28:03.143765	treatment	new_page	0
4	864975	2017-01-21 01:52:26.210827	control	old_page	1
b. Use the cell below to find the number of rows in the dataset.

print (df.shape[0])
294478
c. The number of unique users in the dataset.

df['user_id'].nunique()
290584
d. The proportion of users converted.

(len(df[df['converted']==True]))/df.shape[0]
0.11965919355605512
e. The number of times the new_page and treatment don't match.

len(df.query("(group == 'control') and (landing_page == 'new_page')")
    + df.query("(group == 'treatment') and (landing_page == 'old_page')"))
3893
f. Do any of the rows have missing values?

df.info()
#no missing rows
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 294478 entries, 0 to 294477
Data columns (total 5 columns):
user_id         294478 non-null int64
timestamp       294478 non-null object
group           294478 non-null object
landing_page    294478 non-null object
converted       294478 non-null int64
dtypes: int64(2), object(3)
memory usage: 11.2+ MB
2. For the rows where treatment does not match with new_page or control does not match with old_page, we cannot be sure if this row truly received the new or old page. Use Quiz 2 in the classroom to figure out how we should handle these rows.

a. Now use the answer to the quiz to create a new dataset that meets the specifications from the quiz. Store your new dataframe in df2.

#dropping rows
df2 = df.drop(df[((df['group'] == 'control') & (df['landing_page'] == 'new_page')) | \
                 ((df['group'] == 'treatment') & (df['landing_page'] == 'old_page'))].index)
# Double Check all of the correct rows were removed - this should be 0
df2[((df2['group'] == 'treatment') == (df2['landing_page'] == 'new_page')) == False].shape[0]
0
3. Use df2 and the cells below to answer questions for Quiz3 in the classroom.

a. How many unique user_ids are in df2?

df2['user_id'].nunique()
290584
b. There is one user_id repeated in df2. What is it?

print (df2[df2['user_id'].duplicated()].user_id)
2893    773192
Name: user_id, dtype: int64
c. What is the row information for the repeat user_id?

df2[df2.user_id == 773192]
user_id	timestamp	group	landing_page	converted
1899	773192	2017-01-09 05:37:58.781806	treatment	new_page	0
2893	773192	2017-01-14 02:55:59.590927	treatment	new_page	0
d. Remove one of the rows with a duplicate user_id, but keep your dataframe as df2.

df2.drop_duplicates(['user_id'], inplace=True)
4. Use df2 in the cells below to answer the quiz questions related to Quiz 4 in the classroom.

a. What is the probability of an individual converting regardless of the page they receive?

len(df2[df2['converted']==True]) / df2.shape[0]
0.11959708724499628
b. Given that an individual was in the control group, what is the probability they converted?

control_group = df2[df2['group'] == 'control']
(control_group['converted']==True).sum() / control_group.shape[0]
0.1203863045004612
c. Given that an individual was in the treatment group, what is the probability they converted?

treatment_group = df2[df2.group == 'treatment']
(treatment_group['converted']==True).sum() / treatment_group.shape[0]
0.11880806551510564
d. What is the probability that an individual received the new page?

(df2.landing_page=='new_page').sum() / df2.shape[0]
0.50006194422266881
e. Consider your results from parts (a) through (d) above, and explain below whether you think there is sufficient evidence to conclude that the new treatment page leads to more conversions.

There's no sufficient evidence to conclude that the new treatment page leads to more conversions. Conversion probability slightly changed, and still the treatment group probability is less than the control group.


Part II - A/B Test
Notice that because of the time stamp associated with each event, you could technically run a hypothesis test continuously as each observation was observed.

However, then the hard question is do you stop as soon as one page is considered significantly better than another or does it need to happen consistently for a certain amount of time? How long do you run to render a decision that neither page is better than another?

These questions are the difficult parts associated with A/B tests in general.

1. For now, consider you need to make the decision just based on all the data provided. If you want to assume that the old page is better unless the new page proves to be definitely better at a Type I error rate of 5%, what should your null and alternative hypotheses be? You can state your hypothesis in terms of words or in terms of pold and pnew, which are the converted rates for the old and new pages.

H0:p(new)−p(old)≤0 ~~ H1:p(new)−p(old)>0

2. Assume under the null hypothesis, pnew and pold both have "true" success rates equal to the converted success rate regardless of page - that is pnew and pold are equal. Furthermore, assume they are equal to the converted rate in ab_data.csv regardless of the page.


Use a sample size for each page equal to the ones in ab_data.csv.


Perform the sampling distribution for the difference in converted between the two pages over 10,000 iterations of calculating an estimate from the null.


Use the cells below to provide the necessary parts of this simulation. If this doesn't make complete sense right now, don't worry - you are going to work through the problems below to complete this problem. You can use Quiz 5 in the classroom to make sure you are on the right track.


a. What is the conversion rate for pnew under the null?

p_new = df2.query('converted == True').user_id.nunique() / df2['user_id'].nunique()
p_new
0.11959708724499628
b. What is the conversion rate for pold under the null?


p_old = df2.query('converted == True').user_id.nunique() / df2['user_id'].nunique()
p_old
0.11959708724499628
c. What is nnew, the number of individuals in the treatment group?

n_new = treatment_group['user_id'].nunique()
n_new
145310
d. What is nold, the number of individuals in the control group?

n_old = control_group['user_id'].nunique()
n_old
145274
e. Simulate nnew transactions with a conversion rate of pnew under the null. Store these nnew 1's and 0's in new_page_converted.

new_page_converted = np.random.binomial(1, p_new, n_new)
f. Simulate nold transactions with a conversion rate of pold under the null. Store these nold 1's and 0's in old_page_converted.

old_page_converted = np.random.binomial(1, p_old, n_old)
g. Find pnew - pold for your simulated values from part (e) and (f).

print (new_page_converted.mean() - old_page_converted.mean())
-0.00165402107031
h. Create 10,000 pnew - pold values using the same simulation process you used in parts (a) through (g) above. Store all 10,000 values in a NumPy array called p_diffs.

p_diffs = []
for _ in range(10000):
    new_page_converted = np.random.binomial(1, p_new, n_new)
    old_page_converted = np.random.binomial(1, p_old, n_old)
    conversion_diff = ((new_page_converted).sum() / n_new) - ((old_page_converted).sum() / n_old)
    p_diffs.append(conversion_diff)
i. Plot a histogram of the p_diffs. Does this plot look like what you expected? Use the matching problem in the classroom to assure you fully understand what was computed here.

plt.hist(p_diffs, alpha=0.5, color='blue');

j. What proportion of the p_diffs are greater than the actual difference observed in ab_data.csv?

np.mean(p_diffs > conversion_diff)
0.86539999999999995
k. Please explain using the vocabulary you've learned in this course what you just computed in part j. What is this value called in scientific studies? What does this value mean in terms of whether or not there is a difference between the new and old pages?

The last calculation was the p-value of value ~0.9, this means our null hypothesis is true, It's won't be useful to switch to the new page, as the old page is working quite well.

l. We could also use a built-in to achieve similar results. Though using the built-in might be easier to code, the above portions are a walkthrough of the ideas that are critical to correctly thinking about statistical significance. Fill in the below to calculate the number of conversions for each page, as well as the number of individuals who received each page. Let n_old and n_new refer the the number of rows associated with the old page and new pages, respectively.

import statsmodels.api as sm

convert_old = (control_group['converted']).sum()
convert_new = (treatment_group['converted']).sum()
n_old = control_group.shape[0]
n_new = treatment_group.shape[0]
m. Now use stats.proportions_ztest to compute your test statistic and p-value. Here is a helpful link on using the built in.

z_score, p_value = sm.stats.proportions_ztest([convert_old, convert_new], [n_old, n_new], alternative = 'smaller')
print(z_score)
print(p_value)
1.31092419842
0.905058312759
from scipy.stats import norm
print(norm.ppf(1 - (0.05)))
1.64485362695
n. What do the z-score and p-value you computed in the previous question mean for the conversion rates of the old and new pages? Do they agree with the findings in parts j. and k.?

Yes, the results agree with the findings. The z-score we calculated 1.310 is ~0.3 less than the critical value (1.644). Hypothesis is accepted, We don't need to implement the new page, instead we should stick to the old one.


Part III - A regression approach
1. In this final part, you will see that the result you achieved in the A/B test in Part II above can also be achieved by performing regression.


a. Since each row is either a conversion or no conversion, what type of regression should you be performing in this case?

Logistic regression should be used.

b. The goal is to use statsmodels to fit the regression model you specified in part a. to see if there is a significant difference in conversion based on which page a customer receives. However, you first need to create in df2 a column for the intercept, and create a dummy variable column for which page each user received. Add an intercept column, as well as an ab_page column, which is 1 when an individual receives the treatment and 0 if control.

df2['intercept'] = 1
df2['ab_page'] = pd.get_dummies(df2['group'])['treatment']
df2.head()
user_id	timestamp	group	landing_page	converted	intercept	ab_page
0	851104	2017-01-21 22:11:48.556739	control	old_page	0	1	0
1	804228	2017-01-12 08:01:45.159739	control	old_page	0	1	0
2	661590	2017-01-11 16:55:06.154213	treatment	new_page	0	1	1
3	853541	2017-01-08 18:28:03.143765	treatment	new_page	0	1	1
4	864975	2017-01-21 01:52:26.210827	control	old_page	1	1	0
c. Use statsmodels to instantiate your regression model on the two columns you created in part b., then fit the model using the two columns you created in part b. to predict whether or not an individual converts.

log_model = sm.Logit(df2['converted'], df2[['intercept', 'ab_page']])
log_results = log_model.fit()
Optimization terminated successfully.
         Current function value: 0.366118
         Iterations 6
d. Provide the summary of your model below, and use it as necessary to answer the following questions.

log_results.summary2()
Model:	Logit	No. Iterations:	6.0000
Dependent Variable:	converted	Pseudo R-squared:	0.000
Date:	2021-12-13 22:24	AIC:	212780.3502
No. Observations:	290584	BIC:	212801.5095
Df Model:	1	Log-Likelihood:	-1.0639e+05
Df Residuals:	290582	LL-Null:	-1.0639e+05
Converged:	1.0000	Scale:	1.0000
Coef.	Std.Err.	z	P>|z|	[0.025	0.975]
intercept	-1.9888	0.0081	-246.6690	0.0000	-2.0046	-1.9730
ab_page	-0.0150	0.0114	-1.3109	0.1899	-0.0374	0.0074
e. What is the p-value associated with ab_page? Why does it differ from the value you found in Part II?

Hint: What are the null and alternative hypotheses associated with your regression model, and how do they compare to the null and alternative hypotheses in Part II?

We are using the regression slope to compare the two groups, The null hypothesis is that the slope is zero and the alternative is that the slope is not zero. Here we are including in the alternative hypothesis

f. Now, you are considering other things that might influence whether or not an individual converts. Discuss why it is a good idea to consider other factors to add into your regression model. Are there any disadvantages to adding additional terms into your regression model?

Yes, it's a good idea to add more information, by exctracting useful-related information, It may help.

g. Now along with testing if the conversion rate changes for different pages, also add an effect based on which country a user lives in. You will need to read in the countries.csv dataset and merge together your datasets on the appropriate rows. Here are the docs for joining tables.

Does it appear that country had an impact on conversion? Don't forget to create dummy variables for these country columns - Hint: You will need two columns for the three dummy variables. Provide the statistical output as well as a written response to answer this question.

countries_df = pd.read_csv('./countries.csv')
df_new = countries_df.set_index('user_id').join(df2.set_index('user_id'), how='inner')
df_new['country'].unique()
array(['UK', 'US', 'CA'], dtype=object)
df_new[['UK', 'US', 'CA']] = pd.get_dummies(df_new['country'])[['UK', 'US', 'CA']]
df_new.head()
country	timestamp	group	landing_page	converted	intercept	ab_page	UK	US	CA
user_id										
834778	UK	2017-01-14 23:08:43.304998	control	old_page	0	1	0	1	0	0
928468	US	2017-01-23 14:44:16.387854	treatment	new_page	0	1	1	0	1	0
822059	UK	2017-01-16 14:04:14.719771	treatment	new_page	1	1	1	1	0	0
711597	UK	2017-01-22 03:14:24.763511	control	old_page	0	1	0	1	0	0
710616	UK	2017-01-16 13:14:44.000513	treatment	new_page	0	1	1	1	0	0
log_model_1 = sm.Logit(df_new['converted'], df_new[['intercept', 'UK', 'CA']])
log_results_1 = log_model_1.fit()
log_results_1.summary2()
Optimization terminated successfully.
         Current function value: 0.366116
         Iterations 6
Model:	Logit	No. Iterations:	6.0000
Dependent Variable:	converted	Pseudo R-squared:	0.000
Date:	2021-12-13 22:48	AIC:	212780.8333
No. Observations:	290584	BIC:	212812.5723
Df Model:	2	Log-Likelihood:	-1.0639e+05
Df Residuals:	290581	LL-Null:	-1.0639e+05
Converged:	1.0000	Scale:	1.0000
Coef.	Std.Err.	z	P>|z|	[0.025	0.975]
intercept	-1.9967	0.0068	-292.3145	0.0000	-2.0101	-1.9833
UK	0.0099	0.0133	0.7458	0.4558	-0.0161	0.0360
CA	-0.0408	0.0269	-1.5178	0.1291	-0.0935	0.0119
h. Though you have now looked at the individual factors of country and page on conversion, we would now like to look at an interaction between page and country to see if there significant effects on conversion. Create the necessary additional columns, and fit the new model.

Provide the summary results, and your conclusions based on the results.

log_model_3 = sm.Logit(df_new['converted'], df_new[['intercept', 'UK', 'CA']])
log_results_3 = log_model_3.fit()
log_results_3.summary2()
Optimization terminated successfully.
         Current function value: 0.366116
         Iterations 6
Model:	Logit	No. Iterations:	6.0000
Dependent Variable:	converted	Pseudo R-squared:	0.000
Date:	2021-12-13 22:53	AIC:	212780.8333
No. Observations:	290584	BIC:	212812.5723
Df Model:	2	Log-Likelihood:	-1.0639e+05
Df Residuals:	290581	LL-Null:	-1.0639e+05
Converged:	1.0000	Scale:	1.0000
Coef.	Std.Err.	z	P>|z|	[0.025	0.975]
intercept	-1.9967	0.0068	-292.3145	0.0000	-2.0101	-1.9833
UK	0.0099	0.0133	0.7458	0.4558	-0.0161	0.0360
CA	-0.0408	0.0269	-1.5178	0.1291	-0.0935	0.0119
Conclusion
Testing the new page increases conversions, We came to a conclusion that it won't be necessary to switch to the new page as the old one is working quite, Actually the old page is working slightly better than the new one.

from subprocess import call
call(['python', '-m', 'nbconvert', 'Analyze_ab_test_results_notebook.ipynb'])
0
 
